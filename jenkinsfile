pipeline{
    agent any
    environment {
        registry = "598189530267.dkr.ecr.ap-south-1.amazonaws.com/pumejrepo"
        //AWS_ECR_PASSWORD=$(aws ecr get-login-password --region ap-south-1)
    }
    stages{
        stage ('Git Checkout') {
            steps {
                git branch: 'pumejbranch', credentialsId: 'git_credentials', url: 'https://github.com/Mexxy-lab/dockerize-python-flask2.git'
            }
        }
        stage ('Build image') {
            steps {
                script {
                    def myImage = docker.build("598189530267.dkr.ecr.ap-south-1.amazonaws.com/pumejrepo:pythonflask1.0.1")
                }
            }
        }
        stage('Push to AWS ECR') {
            steps {
               script{
                   //https://AwsAccountNumber.dkr.ecr.region.amazonaws.com/rekeyole-app', 'ecr:region:credentialsId
                   docker.withRegistry('https://598189530267.dkr.ecr.ap-south-1.amazonaws.com/pumejrepo', 'ecr:ap-south-1:aws_ecr_repo') {

                   // Tagging image
                   def myImage = docker.build("598189530267.dkr.ecr.ap-south-1.amazonaws.com/pumejrepo:pythonflask1.0.1")

                   // pushing image upload....
                   myImage.push()
                   }
               }
            }
        }
        //This works for Unix Server
        stage ('Stopping Previous containers') {
            steps {
                script {
                    sh 'docker ps -f name=mypythoncontainer -q | xargs --no-run-if-empty docker container stop'
                    sh 'docker container ls -a -f name=mypythoncontainer -q | xargs -r docker container rm'
                }
            }
        }
        stage ('Docker run for Container creation') {
            steps {
               script {
                   sh 'docker run -d -p 8338:3000 --rm name=mypythoncontainer 598189530267.dkr.ecr.ap-south-1.amazonaws.com/pumejrepo:pythonflask1.0.1'
               }
            }
        }
    }
}